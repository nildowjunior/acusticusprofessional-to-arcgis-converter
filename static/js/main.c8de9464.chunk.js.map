{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","files","generateWarningsCSVFiles","bind","assertThisInitialized","mountFileHref","content","concat","window","btoa","data","WarningDevices","forEach","device","csvFileName","DisplayName","CoveredArea","PolygonPath","path","Lat","Lng","push","name","setState","_this2","react_default","a","createElement","id","cols","rows","onChange","event","JSON","parse","target","value","map","filesData","key","download","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGqBA,qBACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,IAETR,EAAKS,yBAA2BT,EAAKS,yBAAyBC,KAA9BT,OAAAU,EAAA,EAAAV,CAAAD,IAChCA,EAAKY,cAAgBZ,EAAKY,cAAcF,KAAnBT,OAAAU,EAAA,EAAAV,CAAAD,IAPNA,6EAULa,GACZ,4CAAAC,OAA6CC,OAAOC,KAAKH,qDAGlCI,GACvB,IAAIT,EAAQ,GACVS,EAAKC,eAAeC,QAAQ,SAAAC,GACxB,IAAIC,EAAcD,EAAOE,YAAc,OACnCT,EAAU,uBACdO,EAAOG,YAAYC,YAAYL,QAAQ,SAAAM,GACnCZ,GAAWY,EAAKC,IAAM,IAAMD,EAAKE,IAAM,OAE3CnB,EAAMoB,KAAK,CACPC,KAAMR,EACNR,cAGRV,KAAK2B,SAAS,CACVtB,2CAIC,IAAAuB,EAAA5B,KACL,OACI6B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAUL,KAAK,OAAOM,GAAG,OAAOC,KAAK,KAAKC,KAAK,KAAKC,SAAU,SAACC,GAC3DR,EAAKtB,yBAAyB+B,KAAKC,MAAMF,EAAMG,OAAOC,YAG9DX,EAAAC,EAAAC,cAAA,WACK/B,KAAKI,MAAMC,MAAMoC,IAAI,SAAAC,GACpB,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGY,IAAKD,EAAUhB,KAAMkB,SAAUF,EAAUhB,KAAMmB,KAAMjB,EAAKnB,cAAciC,EAAUhC,UAArF,YAAAC,OAA4G+B,EAAUhB,OACtHG,EAAAC,EAAAC,cAAA,uBA9CKe,IAAMC,YCSnBC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8de9464.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          files: []\n        };\n        this.generateWarningsCSVFiles = this.generateWarningsCSVFiles.bind(this);\n        this.mountFileHref = this.mountFileHref.bind(this);\n    }\n\n    mountFileHref(content) {\n      return `data:text/csv;charset=utf-8;base64,${window.btoa(content)}`\n    }\n\n    generateWarningsCSVFiles(data) {\n      let files = [];\n        data.WarningDevices.forEach(device => {\n            let csvFileName = device.DisplayName + \".csv\";\n            let content = \"latitude,longitude\\n\";\n            device.CoveredArea.PolygonPath.forEach(path => {\n                content += path.Lat + \",\" + path.Lng + \"\\n\";\n            });\n            files.push({\n                name: csvFileName,\n                content\n            });\n        });\n        this.setState({\n            files\n        });\n    }\n\n    render() {\n        return (\n            <div>\n              <div>\n                  <textarea name=\"data\" id=\"data\" cols=\"30\" rows=\"10\" onChange={(event) => {\n                      this.generateWarningsCSVFiles(JSON.parse(event.target.value));\n                  }}/>\n              </div>\n              <div>\n                  {this.state.files.map(filesData => {\n                    return (\n                        <div>\n                            <a key={filesData.name} download={filesData.name} href={this.mountFileHref(filesData.content)}>{`Download ${filesData.name}`}</a>\n                            <br/>\n                        </div>\n                    )\n                  })}\n              </div>\n            </div>\n        );\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}