{"version":3,"sources":["RawFileDowload.js","CSVFileDowload.js","FileBlock.js","App.js","serviceWorker.js","index.js"],"names":["RawFileDowload","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","downloadName","MIMEType","base64Content","children","others","objectWithoutProperties","react_default","a","createElement","assign","download","href","concat","React","PureComponent","CSVFileDowload","name","content","RawFileDowload_RawFileDowload","window","btoa","FileBlock","className","CSVFileDowload_CSVFileDowload","aria-label","App","_this","inputTextArea","createRef","state","files","showUseInstructions","error","undefined","generateWarningsCSVFiles","bind","assertThisInitialized","mountFileHref","generateWarningCSVFile","handleOnClickGenerateFiles","getUseInstructions","handleOnClickToggleUseInstructions","JSON","parse","current","value","e","toString","setState","device","CoveredArea","PolygonPath","DisplayName","forEach","path","Lat","Lng","Error","data","_this2","WarningDevices","push","target","rel","onClick","style","color","id","ref","map","filesData","FileBlock_FileBlock","key","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43bf7c14.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class RawFileDowload extends React.PureComponent {\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        let {downloadName, MIMEType, base64Content, children, ...others} = this.props;\n        return (\n            <a\n                download={downloadName}\n                href={`data:${MIMEType};base64,${base64Content}`}\n                {...others}\n            >\n                {children}\n            </a>\n        );\n    }\n};","import React from \"react\";\nimport RawFileDowload from \"./RawFileDowload\";\n\nexport default class CSVFileDowload extends React.PureComponent {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let {name, content, ...others} = this.props;\n        return (\n            <RawFileDowload\n                downloadName={name}\n                MIMEType=\"text/csv;charset=utf-8\"\n                base64Content={window.btoa(content)}\n                {...others}\n            >\n                {`${name} üíæÔ∏è`}\n            </RawFileDowload>\n        );\n    }\n};","import React from \"react\";\nimport CSVFileDowload from \"./CSVFileDowload\";\n\nexport default class FileBlock extends React.PureComponent {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let {name, content} = this.props;\n        return (\n            <div className={`input-group`}>\n                <div className=\"input-group-prepend\">\n                    <CSVFileDowload\n                        className=\"input-group-text\"\n                        name={`${name}`}\n                        content={content}\n                    />\n                </div>\n                <textarea className=\"form-control\" aria-label=\"With textarea\">{content}</textarea>\n            </div>\n        );\n    }\n};","import React from 'react';\nimport './App.css';\nimport FileBlock from \"./FileBlock\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.inputTextArea = React.createRef();\n        this.state = {\n            files: [],\n            showUseInstructions: false,\n            error: undefined\n        };\n        this.generateWarningsCSVFiles = this.generateWarningsCSVFiles.bind(this);\n        this.mountFileHref = this.mountFileHref.bind(this);\n        this.generateWarningCSVFile = this.generateWarningCSVFile.bind(this);\n        this.handleOnClickGenerateFiles = this.handleOnClickGenerateFiles.bind(this);\n        this.getUseInstructions = this.getUseInstructions.bind(this);\n        this.handleOnClickToggleUseInstructions = this.handleOnClickToggleUseInstructions.bind(this);\n    }\n\n    mountFileHref(content) {\n        return `data:text/csv;charset=utf-8;base64,${window.btoa(content)}`\n    }\n\n    handleOnClickGenerateFiles() {\n        let files, error;\n        try {\n            files = this.generateWarningsCSVFiles(JSON.parse(this.inputTextArea.current.value));\n        } catch (e) {\n            files = [];\n            error = e.toString();\n        }\n\n        this.setState({\n            files,\n            error\n        })\n    }\n\n    generateWarningCSVFile(device) {\n        if (device && device.CoveredArea && device.CoveredArea.PolygonPath && device.DisplayName) {\n            let content = \"latitude,longitude\\n\";\n            device.CoveredArea.PolygonPath.forEach(path => {\n                content += path.Lat + \",\" + path.Lng + \"\\n\";\n            });\n            return {\n                name: device.DisplayName + \".csv\",\n                content\n            };\n        }\n        else throw new Error(\"device doesn't have all the required attributes\")\n    }\n\n    generateWarningsCSVFiles(data) {\n        let files = [];\n        if (data && data.WarningDevices) {\n            data.WarningDevices.forEach((device) => files.push(this.generateWarningCSVFile(device)));\n        } else {\n            files.push(this.generateWarningCSVFile(data));\n        }\n        return files;\n    }\n\n    handleOnClickToggleUseInstructions() {\n        this.setState({\n            showUseInstructions: !this.state.showUseInstructions\n        });\n    }\n\n    getUseInstructions() {\n        if (this.state.showUseInstructions) {\n            return (\n                <div className=\"row col-md-12\">\n                    <ol>\n                        <li>{\"Acesse o site \"} <a target=\"_blank\" rel=\"noopener noreferrer\"\n                                                  href=\"http://acusticusprofessional.telegrafia.eu/Acusticus.aspx\">{\"acusticus professional\"}</a>\n                        </li>\n                        <li>{\"Abra as ferramentas de desenvolvedor (pressione F12 ou Ctrl + Shift + i)\"}</li>\n                        <li>{\"Nas ferramentas de desenvolvedor acesse a aba \\\"Network\\\"\"}</li>\n                        <li>{\"Se estiver logado:\"}</li>\n                        <ol>\n                            <li>{\"Selecione um dos componentes de √°udio\"}</li>\n                            <li>{\"Use a op√ß√£o de salvar (menu lateral direito)\"}</li>\n                            <li>{\"Nas ferramentas de desenvolvedor utilizar a op√ß√£o de filtro da parte superior para buscar o request \\\"updateWarningDeviceSettings\\\". Existir√° um item desse para cada vez que a op√ß√£o salvar for pressionada\"}</li>\n                            <li>{\"Siga as demais instru√ß√µes\"}</li>\n                        </ol>\n                        <li>{\"Se estiver deslogado\"}</li>\n                        <ol>\n                            <li>{\"Pressione F5 para recarregar a p√°gina\"}</li>\n                            <li>{\"Nas ferramentas de desenvolvedor utilizar a op√ß√£o de filtro da parte superior para buscar o request \\\"loadProjectLayerWithVisibleGeoObjects\\\"\"}</li>\n                            <li>{\"Siga as demais instru√ß√µes\"}</li>\n                        </ol>\n                        <li>{\"Seleciona o item apresentado\"}</li>\n                        <li>{\"Acesse a aba \\\"preview\\\" e copie o conte√∫do da resposta (apenas a parte textual sem copiar o \\\" do inicio e do final\"}</li>\n                        <li>{\"Cole o conte√∫do copiado no espa√ßo abaixo e pressione o bot√£o para gerar os arquivos CSV\"}</li>\n                    </ol>\n                    <p>\n                        {\"Para converter os arquivos CSVs gerados para o formato KMZ voc√™ pode utilizar o site  \"} <a\n                        target=\"_blank\" rel=\"noopener noreferrer\"\n                        href=\"https://mygeodata.cloud/converter/latlong-to-kmz\">\n                        {\"deste link\"}\n                    </a>\n                    </p>\n                </div>\n            )\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row col-md-12\">\n                    <button onClick={this.handleOnClickToggleUseInstructions}>{`${this.state.showUseInstructions ? \"Ocultar\" : \"Apresentar\"} instru√ß√µes de uso`}</button>\n                </div>\n                {this.getUseInstructions()}\n                <div className=\"row col-md-12\">\n                    <p style={{color: 'red'}}>\n                        {this.state.error}\n                    </p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-5\">\n                        <textarea\n                            name=\"data\"\n                            id=\"data\"\n                            className=\"dataInput\"\n                            ref={this.inputTextArea}\n                        />\n                    </div>\n                    <div className=\"col-md-2\">\n                        <button onClick={this.handleOnClickGenerateFiles}>\n                            {\"Generate csv files\"}\n                        </button>\n                    </div>\n                    <div className=\"col-md-5\">\n                        {this.state.files.map(filesData =>\n                            <FileBlock\n                                key={filesData.name}\n                                name={filesData.name}\n                                content={filesData.content}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}